name: Build Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build:
        description: 'Build the Docker image'
        required: true
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PLATFORMS: linux/amd64,linux/arm64
  VERSION: v0.12.0

jobs:
  build-and-push:
    runs-on: ubuntu-24.04
    if: contains(github.event.head_commit.message, '#BUILD') || github.event_name == 'workflow_dispatch'
    steps:

      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Step 2: Set up QEMU (for multi-architecture builds)
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      # Step 3: Set up Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      # Step 4: Login to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}

      # Step 5: Set lowercase image name
      - name: Set lowercase image name
        id: set_image_name
        run: |
          IMAGE_NAME="ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      # Step 6: Build and Push Multi-Arch Image (Original)
      - name: Build and Push Multi-Arch Image (Original)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.set_image_name.outputs.image_name }}:latest

      # Step 7: Build and Push Multi-Arch Image (Slim)
      - name: Build amd64-only local image for Slim
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: radio-player:slim-candidate-amd64

      # Step 8: Build and Push Multi-Arch Image (Slim)
      - name: Build arm64-only local image for Slim
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: false
          tags: radio-player:slim-candidate-arm64

      # Step 9: DockerSlim - Minify AMD64 Image
      - name: DockerSlim - Minify AMD64 Image
        uses: kitabisa/docker-slim-action@v1
        env:
          DSLIM_HTTP_PROBE: false
        with:
          target: radio-player:slim-candidate-amd64
          tag: ${{ steps.set_image_name.outputs.image_name }}:slim-amd64

      # Step 10: DockerSlim - Minify ARM64 Image
      - name: DockerSlim - Minify ARM64 Image
        uses: kitabisa/docker-slim-action@v1
        env:
          DSLIM_HTTP_PROBE: false
        with:
          target: radio-player:slim-candidate-arm64
          tag: ${{ steps.set_image_name.outputs.image_name }}:slim-arm64

      # Step 11: Create Multi-Arch Slim Manifest
      - name: Create Multi-Arch Slim Manifest
        run: |
          docker manifest create ${{ steps.set_image_name.outputs.image_name }}:slim \
            --amend ${{ steps.set_image_name.outputs.image_name }}:slim-amd64 \
            --amend ${{ steps.set_image_name.outputs.image_name }}:slim-arm64
          
          docker manifest push ${{ steps.set_image_name.outputs.image_name }}:slim

      # Step 12: Push Multi-Arch Slim Manifest
      - name: Push Platform-Specific Slim Images (Optional)
        run: |
          docker push ${{ steps.set_image_name.outputs.image_name }}:slim-amd64
          docker push ${{ steps.set_image_name.outputs.image_name }}:slim-arm64