name: Release Drafter

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: 1.24.4

jobs:
  draft_release:
    runs-on: ubuntu-24.04
    outputs:
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: read_version
        run: echo "version=$(cat version/VERSION | tr -d '[:space:]')" >> "$GITHUB_OUTPUT"

      - name: Print version
        run: |
          echo "Version: ${{ steps.read_version.outputs.version }}"

      - name: Delete existing tag and release if exists
        run: |
          TAG_NAME="v${{ steps.read_version.outputs.version }}"
          echo "Checking if tag $TAG_NAME exists..."
          
          # Check if tag exists locally and delete it
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "Deleting local tag $TAG_NAME"
            git tag -d "$TAG_NAME"
          fi
          
          # Check if tag exists on remote and delete it
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "Deleting remote tag $TAG_NAME"
            git push origin --delete "$TAG_NAME" || true
          fi
          
          # Check if release exists and delete it
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "Deleting existing release $TAG_NAME"
            gh release delete "$TAG_NAME" --yes || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog between tags
        id: changelog
        run: |
          TAG_NAME="v${{ steps.read_version.outputs.version }}"
          
          # Get all tags sorted by creation date (most recent first), excluding current tag
          PREVIOUS_TAG=$(git for-each-ref --sort=-creatordate --format='%(refname:short)' refs/tags | grep -v "^${TAG_NAME}$" | head -n 1)
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, showing recent commits"
            # Show last 10 commits if no previous tag
            CHANGELOG=$(git log --oneline --pretty=format:"* %s (%h)" -10 HEAD)
          else
            echo "Generating changelog from $PREVIOUS_TAG to current HEAD"
            CHANGELOG=$(git log --oneline --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..HEAD)
          fi
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="* No changes since last release"
          fi
          
          echo "Generated changelog:"
          echo "$CHANGELOG"
          
          # Save changelog to file and output
          echo "$CHANGELOG" > changelog.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Also save previous tag info
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - uses: release-drafter/release-drafter@v6
        id: release
        with:
          version: ${{ steps.read_version.outputs.version }}
          name: v${{ steps.read_version.outputs.version }}
          tag: v${{ steps.read_version.outputs.version }}
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release with changelog
        run: |
          TAG_NAME="v${{ steps.read_version.outputs.version }}"
          CHANGELOG="${{ steps.changelog.outputs.changelog }}"
          PREVIOUS_TAG="${{ steps.changelog.outputs.previous_tag }}"
          
          RELEASE_BODY="## Changes

          $CHANGELOG

          ## Previous Release
          Previous version: ${PREVIOUS_TAG:-'None'}

          ## Assets
          Download the appropriate binary for your platform from the assets below."
          
          gh release edit "$TAG_NAME" --notes "$RELEASE_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_publish:
    needs: draft_release
    runs-on: ubuntu-24.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TAG_NAME: ${{ needs.draft_release.outputs.tag_name }}
      CGO_ENABLED: 0

    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: mips
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: ppc64le
          - goos: linux
            goarch: riscv64
          - goos: linux
            goarch: s390x
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Display Go version
        run: go version

      - name: Build binary and checksums
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          OUTPUT_NAME="spoofdpi-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${OUTPUT_NAME}.exe"
            go build -ldflags="-w -s" -o "${BINARY_NAME}" ./cmd/spoofdpi
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
            gh release upload "$TAG_NAME" "${BINARY_NAME}" "${BINARY_NAME}.sha256"
          else
            BINARY_NAME="${OUTPUT_NAME}.tar.gz"
            go build -ldflags="-w -s" -o spoofdpi ./cmd/spoofdpi
            tar -zcvf "${BINARY_NAME}" spoofdpi
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
            gh release upload "$TAG_NAME" "${BINARY_NAME}" "${BINARY_NAME}.sha256"
            rm spoofdpi
          fi